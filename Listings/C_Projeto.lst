C51 COMPILER V9.60.0.0   C_PROJETO                                                         05/26/2020 16:04:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE C_PROJETO
OBJECT MODULE PLACED IN .\Objects\C_Projeto.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE C_Projeto.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\C_Projeto.lst) OBJECT(.\Objects\C_Projeto.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          sbit S1_Vermelho = P1^0; //porta de saÃ­da para a luz vermelha do semÃ¡foro S1
   4          sbit S1_Amarelo = P1^1; //porta de saÃ­da para a luz amarela do semÃ¡foro S1
   5          sbit S1_Verde = P1^2; //porta de saÃ­da para a luz verde do semÃ¡foro S1
   6          
   7          sbit S2_Vermelho = P1^3; //porta de saÃ­da para a luz vermelha do semÃ¡foro S2
   8          sbit S2_Amarelo = P1^4; //porta de saÃ­da para a luz amarela do semÃ¡foro S2
   9          sbit S2_Verde = P1^5;//porta de saÃ­da para a luz verde do semÃ¡foro S2
  10          
  11          sbit S3_Vermelho = P2^2; //porta de saÃ­da para a luz vermelha do semÃ¡foro S3
  12          sbit S3_Amarelo = P2^1; //porta de saÃ­da para a luz amarela do semÃ¡foro S3
  13          sbit S3_Verde = P2^0; //porta de saÃ­da para a luz verde do semÃ¡foro S3
  14          
  15          sbit P3_Vermelho = P2^4; //porta de saÃ­da para a luz vermelha do semÃ¡foro P3
  16          sbit P3_Verde = P2^3; //porta de saÃ­da para a luz verde do semÃ¡foro P3
  17          
  18          sbit B3= P3^2; //porta de entrada para pressionar o botÃ£o B3
  19          
  20          int contaSegundos = 0; //esta variÃ¡vel Ã© igual ao nÃºmero de segundos que passaram desde o inÃ­cio do ci
             -clo
  21          int auxContaSegundos = 0; //esta variÃ¡vel conta o nÃºmero de vezes que ocorre overflow no timer (que ocor
             -re quando passam 250 microssegundos)
  22          bit auxMudarSemaforos = 1; //variÃ¡vel "booleana" para evitar estar sempre a definir os semÃ¡foros
  23          
  24          int S1_S2_Verdes=0x1B; // 0001 1011 em binÃ¡rio
  25          int S3_Vermelho_P3_Verde=0x13; // 0001 0011 em binÃ¡rio
  26          int S1_S2_Amarelos=0x2D; // 0010 1101 em binÃ¡rio
  27          int S1_S2_Vermelhos=0x36; // 0011 0110 em binÃ¡rio
  28          int S3_Verde_P3_Vermelho=0x0E; // 0000 1110 em binÃ¡rio
  29          int S3_Amarelo_P3_Vermelho=0x0D; // 0000 1101 em binÃ¡rio
  30          
  31          //*****************IMPORTANTE************************
  32          //0 - LED ligado
  33          //1 - LED desligado
  34          
  35          void Inicializar(void){
  36   1              //Ativar as interrupÃ§Ãµes globais, do timer 0 e da interrupÃ§Ã£o externa 0
  37   1              EA = 1;
  38   1              ET0 = 1;
  39   1              EX0 = 1;
  40   1              //Configurar o timer no modo 2 (8 bits autoreload)
  41   1              TMOD &= 0xF0;
  42   1              TMOD |= 0x02;
  43   1              //Configurar o tempo de contagem para 250 microssegundos
  44   1              TH0 = 0x06;
  45   1              TL0 = 0x06;
  46   1              //Iniciar timer 0 e definir a interrupÃ§Ã£o para ser acionada na falling edge
  47   1              TR0 = 1;
  48   1              IT0 = 1; 
  49   1      }
  50          void Timer0_ISR(void) interrupt 1{
  51   1                      //auxContaSegundos = 1 -> 250 microssegundos
  52   1                      //auxContaSegundos = 4 -> 1 milisegundo
C51 COMPILER V9.60.0.0   C_PROJETO                                                         05/26/2020 16:04:46 PAGE 2   

  53   1                      //auxContaSegundos = 4000 -> 1 segundo
  54   1              if(auxContaSegundos == 4000){ //quando esta variÃ¡vel chegar a 4000, significa que fez-se um segundo
  55   2                      contaSegundos++;
  56   2                      auxContaSegundos = 0; //reset da variÃ¡vel
  57   2                      auxMudarSemaforos = 1; //como o contaSegundos aumentou, definimos isto a 1 para efetuar as verificaÃ§Ãµe
             -s
  58   2              }else{ //se nÃ£o chegou, incrementa-se a variÃ¡vel
  59   2                      auxContaSegundos++;
  60   2              }
  61   1      }
  62          
  63          void External0_ISR(void) interrupt 0 {
  64   1              if (P2 == S3_Verde_P3_Vermelho){ //verifica-se se o sinal verde do semÃ¡foro S3 estÃ¡ ligado
  65   2                      contaSegundos = 25; //se estiver define-se o contasegundos a 25 pois Ã© neste momento que se pÃµe o semÃ
             -¡foro 3 a amarelo como pretendido
  66   2                      auxContaSegundos = 0; //reset da variÃ¡vel que conta os overflows do timer, de modo a passar 5 segundos 
             -a partir do botÃ£o ser clicado
  67   2                      auxMudarSemaforos = 1; //como o contaSegundos mudou, definimos isto a 1 para efetuar as verificaÃ§Ãµes
  68   2              }
  69   1              
  70   1      }
  71          
  72          
  73          void main(void){
  74   1              Inicializar();
  75   1              for(;;){
  76   2                      if (auxMudarSemaforos==1){
  77   3                              if(contaSegundos == 0){ //parte inicial do ciclo, S1 e S2 verdes, S3 vermelho, P3 verde
  78   4                                      P1 = S1_S2_Verdes;
  79   4                                      P2 = S3_Vermelho_P3_Verde;
  80   4                              }
  81   3                              
  82   3                              if(contaSegundos == 10){ //depois de 10 segundos, S1 e S2 ficam amarelos
  83   4                                      P1=S1_S2_Amarelos;
  84   4                                      }
  85   3                              if(contaSegundos >= 10 &&contaSegundos <15){ //entre os 10 e 15 segundos, o semÃ¡foro P3 deve ficar ver
             -de intermitente, a cada segundo
  86   4                                      P3_Verde = ~P3_Verde;
  87   4                              }
  88   3                              
  89   3                              if(contaSegundos == 15){ //depois de 15 segundos, S1 e S2 ficam vermelhos, S3 fica verde e P3 fica verm
             -elho
  90   4                                      P1=S1_S2_Vermelhos;
  91   4                                      P2=S3_Verde_P3_Vermelho;
  92   4                              }
  93   3                              
  94   3                              if(contaSegundos == 25){ //depois de 25 segundos, S3 fica amarelo
  95   4                                      P2=S3_Amarelo_P3_Vermelho;
  96   4                              }
  97   3                              
  98   3                              auxMudarSemaforos=0; //mudar isto para 0 para nÃ£o fazer as verificaÃ§Ãµes atÃ© o contaSegundos increme
             -ntar
  99   3      
 100   3                              if(contaSegundos == 30){ //depois dos 30 segundos, faz-se reset da variÃ¡vel para voltarmos ao inÃ­cio 
             -do ciclo e tratar dos semÃ¡foros
 101   4                                      contaSegundos = 0; 
 102   4                                      auxMudarSemaforos = 1;
 103   4                              }
 104   3                      }
 105   2              }
 106   1      }

C51 COMPILER V9.60.0.0   C_PROJETO                                                         05/26/2020 16:04:46 PAGE 3   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    204    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
